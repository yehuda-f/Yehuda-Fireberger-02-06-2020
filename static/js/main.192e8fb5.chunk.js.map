{"version":3,"sources":["constants/alert.constants.ts","constants/user.constants.ts","constants/message.constants.ts","reducers/authentication.reducer.ts","reducers/index.ts","reducers/registration.reducer.ts","reducers/composeEmail.reducer.ts","reducers/alert.reducer.ts","reducers/manageEmails.reducer.ts","reducers/deleteEmail.reducer.ts","actions/alert.actions.ts","actions/user.actions.ts","actions/message.actions.ts","services/user.service.ts","services/message.service.ts","sagas/user.saga.ts","sagas/composeEmail.saga.ts","sagas/manageEmails.saga.ts","sagas/index.ts","utils/store.ts","utils/auth-header.ts","utils/history.ts","utils/handle-response.ts","pages/ComposeEmail/ComposeEmail.tsx","pages/Login/Login.tsx","components/TopBar.tsx","components/TabPanel.tsx","components/EmailCard.tsx","components/AlertDialog.tsx","pages/ManageEmails/ManageEmails.tsx","pages/Register/Register.tsx","App/App.tsx","theme.ts","serviceWorker.ts","index.tsx"],"names":["alertConstants","userConstants","messageConstants","storedUser","localStorage","getItem","user","JSON","parse","initialState","loggedIn","rootReducer","combineReducers","registration","state","action","type","registering","authentication","loggingIn","composeEmail","sending","success","alert","message","emails","searching","allEmails","error","deleteEmail","deleting","alertActions","clear","userActions","login","username","password","logout","register","messageActions","send","email","getAllEmails","clearAllEmailsState","creationDate","userService","requestOptions","method","headers","body","stringify","fetch","process","then","handleResponse","messageService","authHeader","loginFlow","loginWatcher","RegistrationFlow","registerWatcher","put","removeItem","call","setItem","history","push","cancelled","take","fork","task","cancel","takeLatest","composeEmailWatcher","emailAction","getAllEmailsFlow","getAllEmailsWatcher","deleteEmailFlow","deleteEmailWatcher","select","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","token","run","createBrowserHistory","response","text","data","ok","status","window","location","reload","statusText","Promise","reject","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","primary","main","form","width","submit","buttonProgress","color","position","top","left","marginLeft","connected","connect","props","classes","useState","sender","receiver","subject","inputs","setInputs","useSelector","handleChange","event","target","name","value","useEffect","clearForm","document","getElementById","reset","Container","component","maxWidth","className","Avatar","CircularProgress","data-testid","size","Typography","variant","onSubmit","preventDefault","Object","values","some","x","id","Grid","container","item","xs","sm","TextField","autoComplete","required","fullWidth","label","autoFocus","onChange","disabled","multiline","rows","Button","secondary","invalid_feedback","submitted","setSubmitted","createStyles","root","flexGrow","emailButton","marginRight","TopBar","AppBar","Toolbar","direction","justify","Link","to","TabPanel","children","index","other","role","hidden","aria-labelledby","Box","p","card","height","cardContent","deleteIconButton","EmailCard","setConfirmOpen","setDeleteEmail","showDeleteButton","md","key","Card","CardContent","gutterBottom","moment","utc","format","CardActions","Tooltip","title","IconButton","aria-label","onClick","AlertDialog","open","setOpen","onConfirm","Dialog","onClose","aria-describedby","DialogTitle","DialogContent","DialogActions","tabs","searchIcon","padding","right","pointerEvents","justifyContent","search","cardGrid","paddingTop","paddingBottom","searchEmails","useTheme","setValue","confirmOpen","emailToDelete","setEmailToDelete","searchMessages","setSearchMessages","deleteEmailSuccess","a11yProps","Tabs","newValue","indicatorColor","textColor","Tab","icon","axis","onChangeIndex","dir","sent","length","map","received","App","dispatch","useDispatch","listen","Alert","severity","toString","exact","path","ManageEmails","Register","Login","ComposeEmail","from","createMuiTheme","red","A400","background","default","Boolean","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","navigator","serviceWorker","ready","unregister","catch","console"],"mappings":"kRAAaA,EACA,gBADAA,EAEF,cAFEA,EAGF,cCHEC,EACS,yBADTA,EAES,yBAFTA,EAGS,yBAHTA,EAKM,sBALNA,EAMM,sBANNA,EAOM,sBAPNA,EASD,eCTCC,EACW,8BADXA,EAEW,8BAFXA,EAGW,8BAHXA,EAKW,8BALXA,EAMW,8BANXA,EAOW,8BAPXA,EASW,8BATXA,EAWa,gCAXbA,EAYa,gCAZbA,EAaa,gCCVtBC,EAAaC,aAAaC,QAAQ,QAClCC,EAAkBH,EAAaI,KAAKC,MAAML,GAAc,KACtDM,EAAeH,EAAO,CAAEI,UAAU,EAAMJ,QAAS,GCIvD,IASeK,EATKC,YAAgB,CAChCC,aCPG,WAAwF,IAAlEC,EAAiE,uDAAzC,GAAIC,EAAqC,uCAC1F,OAAQA,EAAOC,MACX,KAAKf,EACD,MAAO,CAAEgB,aAAa,GAC1B,KAAKhB,EAEL,KAAKA,EACD,MAAO,GACX,QACI,OAAOa,IDDfI,eDJG,WAAgG,IAAxEJ,EAAuE,uDAAnDL,EAAcM,EAAqC,uCAClG,OAAQA,EAAOC,MACX,KAAKf,EACD,MAAO,CACHkB,WAAW,EACXb,KAAMS,EAAOT,MAErB,KAAKL,EACD,MAAO,CACHS,UAAU,EACVJ,KAAMS,EAAOT,MAErB,KAAKL,EAEL,KAAKA,EACD,MAAO,GACX,QACI,OAAOa,ICZfM,aETG,WAA0F,IAApEN,EAAmE,uDAA5C,GAAIC,EAAwC,uCAC5F,OAAQA,EAAOC,MACX,KAAKd,EACD,MAAO,CAAEmB,SAAS,GACtB,KAAKnB,EACD,MAAO,CAAEoB,SAAS,GACtB,KAAKpB,EACD,MAAO,GACX,QACI,OAAOY,IFCfS,MGVG,WAAmF,IAApET,EAAmE,uDAA9C,GAAIC,EAA0C,uCACrF,OAAQA,EAAOC,MACX,KAAKhB,EACD,MAAO,CACHgB,KAAM,UACNQ,QAAST,EAAOS,SAExB,KAAKxB,EACD,MAAO,CACHgB,KAAM,QACNQ,QAAST,EAAOS,SAExB,KAAKxB,EACD,MAAO,GACX,QACI,OAAOc,IHJfW,OIXG,WAAkG,IAAlFX,EAAiF,uDAAtD,GAAIC,EAAkD,uCACpG,OAAQA,EAAOC,MACX,KAAKd,EACD,MAAO,CAAEwB,WAAW,GACxB,KAAKxB,EACD,MAAO,CAAEyB,UAAWZ,EAAOY,WAC/B,KAAKzB,EACD,MAAO,CAAE0B,MAAOb,EAAOa,OAC3B,KAAK1B,EACD,MAAO,GACX,QACI,OAAOY,IJCfe,YKZG,WAAuG,IAAlFf,EAAiF,uDAAnD,GAAIC,EAA+C,uCACzG,OAAQA,EAAOC,MACX,KAAKd,EACD,MAAO,CAAE4B,UAAU,GACvB,KAAK5B,EACD,MAAO,CAAEoB,SAAS,GACtB,KAAKpB,EACD,MAAO,GACX,QACI,OAAOY,M,wBCTNiB,EAAe,CACxBT,QAKJ,SAAiBE,GACb,MAAO,CAAER,KAAMhB,EAAwBwB,YALvCI,MAQJ,SAAeJ,GACX,MAAO,CAAER,KAAMhB,EAAsBwB,YARrCQ,MAWJ,WACI,MAAO,CAAEhB,KAAMhB,KChBZ,IAAMiC,EAAc,CACvBC,MAKJ,SAAeC,EAAkBC,GAC7B,MAAO,CAAEpB,KAAMf,EAA6BkC,WAAUC,aALtDC,OAQJ,WACI,MAAO,CAAErB,KAAMf,IARfqC,SAWJ,SAAkBH,EAAkBC,GAChC,MAAO,CAAEpB,KAAMf,EAAgCkC,WAAUC,cCdtD,IAAMG,EAAiB,CAC1BC,KAMJ,SAAcC,GACV,MAAO,CAAEzB,KAAMd,EAAqCuC,UANpDC,aASJ,SAAsBP,GAClB,MAAO,CAAEnB,KAAMd,EAAqCiC,aATpDQ,oBAYJ,WACI,MAAO,CAAE3B,KAAMd,IAZf2B,YAeJ,SAAqBe,GACjB,MAAO,CAAE5B,KAAMd,EAAuC0C,kBCrBnD,IAAMC,EAMb,SAAkBV,EAAkBC,GAChC,IAAMU,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAM1C,KAAK2C,UAAU,CAAEf,WAAUC,cAGrC,OAAOe,MAAM,GAAD,OAAIC,yDAAJ,mBAAoDN,GAC3DO,KAAKC,KAdDT,EAiBb,SAAeV,EAAkBC,GAC7B,IAAMU,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAM1C,KAAK2C,UAAU,CAAEf,WAAUC,cAGrC,OAAOe,MAAM,GAAD,OAAIC,yDAAJ,uBAAwDN,GAC/DO,KAAKC,K,YCxBDC,EAOb,SAAcd,GACV,IAAMK,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAM1C,KAAK2C,UAAL,eAAoBT,KAG9B,OAAOU,MAAM,GAAD,OAAIC,yDAAJ,mBAAoDN,GAC3DO,KAAKC,KAfDC,EAkBb,SAAgBpB,GACZ,OAAOgB,MAAM,GAAD,OAAIC,yDAAJ,qBAA8CjB,IACrDkB,KAAKC,KApBDC,EAuBb,SAA+BpB,GAC3B,IAAMW,EAAiB,CACnBC,OAAQ,MACRC,QAASQ,MAGb,OAAOL,MAAM,GAAD,OAAIC,yDAAJ,0BAAmDjB,GAAYW,GACtEO,KAAKC,KA9BDC,EAiCb,SAAqBX,GAKjB,OAAOO,MAAM,GAAD,OAAIC,yDAAJ,qBAA8CR,GAJnC,CACnBG,OAAQ,WAIPM,KAAKC,K,eCnCJjB,I,WAMAoB,I,WAsBOC,I,YAePC,I,YAeOC,IA1DjB,SAAUvB,KAAV,iEACI,OADJ,SACUwB,YAAI5B,EAAYI,UAD1B,OAGIjC,aAAa0D,WAAW,QAH5B,uCAMA,SAAUL,GAAUtB,EAAkBC,GAAtC,uEAGe,OAHf,kBAGqB2B,YAAKlB,EAAmBV,EAAUC,GAHvD,OAKQ,OAFA9B,EAHR,gBAKcuD,YAAI,CAAE7C,KAAMf,EAA6BK,SALvD,OAOQF,aAAa4D,QAAQ,OAAQzD,KAAK2C,UAAU5C,IAE5C2D,GAAQC,KAAK,KATrB,wBAWQ,OAXR,oCAWcL,YAAI,CAAE7C,KAAMf,EAA6B2B,MAAK,OAX5D,QAYQ,OAZR,UAYciC,YAAI9B,EAAaH,MAAb,OAZlB,QAcY,OAdZ,oBAckBuC,cAdlB,oCAeYF,GAAQC,KAAK,UAfzB,6DAmBW5D,GAnBX,4DAsBO,SAAUoD,KAAV,6EAEgC,OAFhC,SAEsCU,YAAKnE,GAF3C,OAIc,OAJd,SAESkC,EAFT,EAESA,SAAUC,EAFnB,EAEmBA,SAFnB,SAIoBiC,YAAKZ,GAAWtB,EAAUC,GAJ9C,OAMgB,OAFTkC,EAJP,iBAMsBF,YAAK,CAACnE,EAAsBA,IANlD,kBAQYe,OAASf,EARrB,iBAQ2C,OAR3C,UAQiDsE,YAAOD,GARxD,QAUC,OAVD,UAUOP,YAAK1B,IAVZ,+DAeP,SAAUsB,GAAiBrD,GAA3B,iEAEQ,OAFR,kBAEcyD,YAAKlB,EAAsBvC,EAAK6B,SAAU7B,EAAK8B,UAF7D,OAIQ,OAJR,SAIcyB,YAAI,CAAE7C,KAAMf,IAJ1B,OAQQ,OAFAgE,GAAQC,KAAK,UANrB,SAQcL,YAAI9B,EAAaT,QAAQ,4BARvC,+BAUQ,OAVR,oCAUcuC,YAAI,CAAE7C,KAAMf,EAAgC2B,MAAK,OAV/D,QAWQ,OAXR,UAWciC,YAAI9B,EAAaH,MAAb,OAXlB,uDAeO,SAAUgC,KAAV,iEACH,OADG,SACGY,YAAWvE,EAAgC0D,IAD9C,wC,gBC3DGA,I,YAYOc,IAZjB,SAAUd,GAAiBe,GAA3B,iEAEQ,OAFR,kBAEcX,YAAKR,EAAqBmB,EAAYjC,OAFpD,OAIQ,OAJR,SAIcoB,YAAI,CAAE7C,KAAMd,IAJ1B,OAKQ,OALR,SAKc2D,YAAI9B,EAAaT,QAAQ,0BALvC,8BAOQ,OAPR,mCAOcuC,YAAI,CAAE7C,KAAMd,EAAqC0B,MAAK,OAPpE,QAQQ,OARR,UAQciC,YAAI9B,EAAaH,MAAb,OARlB,sDAYO,SAAU6C,KAAV,iEACH,OADG,SACGD,YAAWtE,EAAqCyD,IADnD,wC,gBCZGgB,I,YAgBOC,I,YAKPC,I,YAYOC,IAjCjB,SAAUH,GAAiBD,GAA3B,uEAEyB,OAFzB,kBAE+BK,aAAO,SAACjE,GAAD,OAAWA,EAAMI,eAAeR,YAFtE,mCAKY,OALZ,SAKkBqD,YAAKR,EAAsCmB,EAAYvC,UALzE,2CAMY,OANZ,UAMkB4B,YAAKR,EAAuBmB,EAAYvC,UAN1D,4BAQQ,OAJMR,EAJd,eAQckC,YAAI,CAAE7C,KAAMd,EAAqCyB,cAR/D,QASQ,OATR,UASckC,YAAI9B,EAAaT,QAAQ,0BATvC,gCAWQ,OAXR,oCAWcuC,YAAI,CAAE7C,KAAMd,EAAqC0B,MAAK,OAXpE,QAYQ,OAZR,UAYciC,YAAI9B,EAAaH,MAAb,OAZlB,uDAgBO,SAAUgD,KAAV,iEACH,OADG,SACGJ,YAAWtE,EAAqCyE,IADnD,wCAKP,SAAUE,GAAgBH,GAA1B,iEAEQ,OAFR,kBAEcX,YAAKR,EAA4BmB,EAAY9B,cAF3D,OAIQ,OAJR,SAIciB,YAAI,CAAE7C,KAAMd,IAJ1B,OAKQ,OALR,SAKc2D,YAAI9B,EAAaT,QAAQ,4BALvC,8BAOQ,OAPR,mCAOcuC,YAAI,CAAE7C,KAAMd,EAAuC0B,MAAK,OAPtE,QAQQ,OARR,UAQciC,YAAI9B,EAAaH,MAAb,OARlB,sDAYO,SAAUkD,KAAV,iEACH,OADG,SACGN,YAAWtE,EAAuC2E,IADrD,wC,gBCjCGG,IAAV,SAAUA,KAAV,iEACI,OADJ,SACUC,YACF,CACIvB,KACAE,KACAa,KACAG,KACAE,OAPZ,wCAWeE,UCXTE,GAAiBC,cAEVC,GAAQC,YACjB1E,EACA2E,YAAgBJ,KCVb,SAAS1B,KACZ,IAAIrD,EAAaC,aAAaC,QAAQ,QAClCC,EAAOH,EAAaI,KAAKC,MAAML,GAAc,KAEjD,OAAIG,GAAQA,EAAKiF,MACN,CAAE,cAAiB,UAAYjF,EAAKiF,OAEpC,GDMfL,GAAeM,IAAIR,I,aEXNf,GAAUwB,eCFhB,SAASnC,GAAeoC,GAC3B,OAAOA,EAASC,OAAOtC,MAAK,SAACsC,GACzB,IAAMC,EAAOD,GAAQpF,KAAKC,MAAMmF,GAChC,IAAKD,EAASG,GAAI,CACU,MAApBH,EAASI,SACT1F,aAAa0D,WAAW,QACxBiC,OAAOC,SAASC,QAAO,IAG3B,IAAMrE,EAASgE,GAAQA,EAAKpE,SAAYkE,EAASQ,WACjD,OAAOC,QAAQC,OAAOxE,GAG1B,OAAOgE,K,0HCHTS,GAAYC,cAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACHC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJC,OAAQR,EAAMG,QAAQ,GACtBM,gBAAiBT,EAAMU,QAAQC,QAAQC,MAE3CC,KAAM,CACFC,MAAO,OACPZ,UAAWF,EAAMG,QAAQ,IAE7BY,OAAQ,CACJP,OAAQR,EAAMG,QAAQ,EAAG,EAAG,IAEhCa,eAAgB,CACZC,MAAO,QACPC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNlB,WAAY,GACZmB,YAAa,QA0HrB,IAIMC,GAAYC,aAJM,SAAChH,GAAD,MAAuB,CAC3CM,aAAcN,EAAMM,gBAGmBmB,EAAzBuF,EA1HlB,SAAsBC,GAClB,IAAMC,EAAU3B,KADc,EAGF4B,mBAAS,CACjCC,OAAQ,GACRC,SAAU,GACVC,QAAS,GACT5G,QAAS,KAPiB,oBAGvB6G,EAHuB,KAGfC,EAHe,OAUDC,aAAY,SAACzH,GAAD,OAAsBA,EAAMM,gBAA7DC,EAVsB,EAUtBA,QAASC,EAVa,EAUbA,QAQjB,SAASkH,EAAaC,GAAmE,IAAD,EAC5DA,EAAMC,OAAtBC,EAD4E,EAC5EA,KAAMC,EADsE,EACtEA,MACdN,GAAU,SAAAD,GAAM,kCAAUA,GAAV,mBAAmBM,EAAOC,OAR9CC,qBAAU,WACFvH,GACAwH,MAEL,CAACxH,IAeJ,IAAMwH,EAAY,WAAO,IAAD,EACpB,QAAC,EAAAC,SAASC,eAAe,uBAAzB,SAA8DC,SAGlE,OACI,kBAACC,GAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACjC,yBAAKC,UAAWrB,EAAQxB,OACpB,kBAAC8C,GAAA,EAAD,CAAQD,UAAWrB,EAAQlB,QACvB,kBAAC,KAAD,MACCzF,GAAW,kBAACkI,GAAA,EAAD,CAAkBC,cAAY,4BAA4BC,KAAM,GAAIJ,UAAWrB,EAAQT,kBAEvG,kBAACmC,GAAA,EAAD,CAAYP,UAAU,KAAKQ,QAAQ,MAAnC,aAGA,0BAAMN,UAAWrB,EAAQZ,KAAMwC,SAtB3C,SAAiCnB,GAC7BA,EAAMoB,iBAEDC,OAAOC,OAAO1B,GAAQ2B,MAAK,SAAAC,GAAC,MAAW,KAANA,MAClClC,EAAMvF,KAAK6F,IAkBgD6B,GAAG,gBACtD,kBAACC,GAAA,EAAD,CAAMC,WAAS,EAAC1D,QAAS,GACrB,kBAACyD,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACC,GAAA,EAAD,CACIC,aAAa,WACb9B,KAAK,WACLgB,QAAQ,WACRe,UAAQ,EACRC,WAAS,EACTT,GAAG,WACHU,MAAM,KACNC,WAAS,EACTC,SAAUtC,EACVuC,SAAU1J,KAGlB,kBAAC8I,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACC,GAAA,EAAD,CACIb,QAAQ,WACRe,UAAQ,EACRC,WAAS,EACTT,GAAG,SACHU,MAAM,OACNjC,KAAK,SACL8B,aAAa,SACbK,SAAUtC,EACVuC,SAAU1J,KAGlB,kBAAC8I,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAACE,GAAA,EAAD,CACIb,QAAQ,WACRe,UAAQ,EACRC,WAAS,EACTT,GAAG,UACHU,MAAM,UACNjC,KAAK,UACL8B,aAAa,UACbK,SAAUtC,EACVuC,SAAU1J,KAGlB,kBAAC8I,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAACE,GAAA,EAAD,CACIb,QAAQ,WACRe,UAAQ,EACRC,WAAS,EACTK,WAAS,EACTC,KAAM,EACNtC,KAAK,UACLiC,MAAM,UACNV,GAAG,UACHY,SAAUtC,EACVuC,SAAU1J,MAItB,kBAAC6J,GAAA,EAAD,CACIlK,KAAK,SACL2J,WAAS,EACThB,QAAQ,YACRnC,MAAM,UACN6B,UAAWrB,EAAQV,OACnByD,SAAU1J,GANd,c,oBCnIdgF,GAAYC,cAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACHC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJC,OAAQR,EAAMG,QAAQ,GACtBM,gBAAiBT,EAAMU,QAAQkE,UAAUhE,MAE7CC,KAAM,CACFC,MAAO,OACPZ,UAAWF,EAAMG,QAAQ,IAE7BY,OAAQ,CACJP,OAAQR,EAAMG,QAAQ,EAAG,EAAG,IAEhC0E,iBAAkB,CACd5D,MAAOjB,EAAMU,QAAQrF,MAAMuF,MAE/BI,eAAgB,CACZC,MAAO,QACPC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNlB,WAAY,GACZmB,YAAa,QA0FrB,IAIMC,GAAYC,aAJM,SAAChH,GAAD,MAAuB,CAC3CI,eAAgBJ,EAAMI,kBAGiBe,EAAzB6F,EA1FlB,SAAeC,GACX,IAAMC,EAAU3B,KADO,EAGK4B,mBAAS,CACjC9F,SAAU,GACVC,SAAU,KALS,oBAGhBiG,EAHgB,KAGRC,EAHQ,OAOWL,oBAAS,GAPpB,oBAOhBoD,EAPgB,KAOLC,EAPK,KAQfnJ,EAAuBkG,EAAvBlG,SAAUC,EAAaiG,EAAbjG,SACZjB,EAAYoH,aAAY,SAACzH,GAAD,OAAsBA,EAAMI,eAAeC,aAMzE,SAASqH,EAAaC,GAAmE,IAAD,EAC5DA,EAAMC,OAAtBC,EAD4E,EAC5EA,KAAMC,EADsE,EACtEA,MACdN,GAAU,SAAAD,GAAM,kCAAUA,GAAV,mBAAmBM,EAAOC,OAY9C,OAlBAC,qBAAU,WACNd,EAAM1F,WACP,IAiBC,kBAAC6G,GAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACjC,yBAAKC,UAAWrB,EAAQxB,OACpB,kBAAC8C,GAAA,EAAD,CAAQD,UAAWrB,EAAQlB,QACvB,kBAAC,KAAD,MACC3F,GAAa,kBAACoI,GAAA,EAAD,CAAkBC,cAAY,4BAA4BC,KAAM,GAAIJ,UAAWrB,EAAQT,kBAEzG,kBAACmC,GAAA,EAAD,CAAYP,UAAU,KAAKQ,QAAQ,MAAnC,SAGA,0BAAMN,UAAWrB,EAAQZ,KAAMwC,SAnB3C,SAAsBnB,GAClBA,EAAMoB,iBAENyB,GAAa,GACTnJ,GAAYC,GACZ2F,EAAM7F,MAAMC,EAAUC,KAed,kBAACoI,GAAA,EAAD,CACIb,QAAQ,WACR5C,OAAO,SACP2D,UAAQ,EACRC,WAAS,EACTT,GAAG,WACHU,MAAM,WACNjC,KAAK,WACL8B,aAAa,WACbI,WAAS,EACTC,SAAUtC,IAEb6C,IAAclJ,GACX,yBAAKkH,UAAWrB,EAAQoD,kBAAxB,wBAEJ,kBAACZ,GAAA,EAAD,CACIb,QAAQ,WACR5C,OAAO,SACP2D,UAAQ,EACRC,WAAS,EACThC,KAAK,WACLiC,MAAM,WACN5J,KAAK,WACLkJ,GAAG,WACHO,aAAa,mBACbK,SAAUtC,IAEb6C,IAAcjJ,GACX,yBAAKiH,UAAWrB,EAAQoD,kBAAxB,wBAEJ,kBAACF,GAAA,EAAD,CACIlK,KAAK,SACL2J,WAAS,EACThB,QAAQ,YACRnC,MAAM,YACN6B,UAAWrB,EAAQV,OACnBkC,cAAY,gBANhB,e,oJCrGdnD,GAAYC,cAAW,SAACC,GAAD,OACzBgF,aAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,YAAa,CACTC,YAAapF,EAAMG,QAAQ,GAC3BkB,WAAYrB,EAAMG,QAAQ,SAK/B,SAASkF,KAAU,IAAD,EACf5D,EAAU3B,KACVnF,EAAiBqH,aAAY,SAACzH,GAAD,OAAsBA,EAAMI,kBAE/D,OACI,yBAAKmI,UAAWrB,EAAQwD,MACpB,kBAACK,GAAA,EAAD,CAAQpE,SAAS,UACb,kBAACqE,GAAA,EAAD,KACI,kBAAC3B,GAAA,EAAD,CACIC,WAAS,EACT2B,UAAU,MACVC,QAAQ,gBACRnF,WAAW,UAEX,kBAAC6C,GAAA,EAAD,CAAYC,QAAQ,MAApB,SACWzI,EAAeR,SAAf,UAA0BQ,EAAeZ,YAAzC,aAA0B,EAAqB6B,SAAW,QADrE,KAGA,6BACI,kBAAC+I,GAAA,EAAD,CAAQ1D,MAAM,UAAU6B,UAAWrB,EAAQ0D,YAAavC,UAAW8C,KAAMC,GAAI,kBAA7E,iBACA,kBAAChB,GAAA,EAAD,CAAQ1D,MAAM,UAAU6B,UAAWrB,EAAQ0D,YAAavC,UAAW8C,KAAMC,GAAI,KAA7E,kBAEJ,6BACKhL,EAAeR,SACV,kBAACwK,GAAA,EAAD,CAAQ1D,MAAM,UAAU2B,UAAW8C,KAAMC,GAAI,UAA7C,UACA,kBAAC,WAAD,KACE,kBAAChB,GAAA,EAAD,CAAQ1D,MAAM,YAAYmC,QAAQ,YAAYR,UAAW8C,KAAMC,GAAI,UAAnE,SACA,kBAAChB,GAAA,EAAD,CAAQ1D,MAAM,UAAU2B,UAAW8C,KAAMC,GAAI,aAA7C,kB,wBCpC7B,SAASC,GAASpE,GAAuB,IACpCqE,EAAqCrE,EAArCqE,SAAUxD,EAA2Bb,EAA3Ba,MAAOyD,EAAoBtE,EAApBsE,MAAUC,EADQ,aACEvE,EADF,8BAG3C,OACI,kBAAC2B,GAAA,EAAD,eACIP,UAAU,MACVoD,KAAK,WACLC,OAAQ5D,IAAUyD,EAClBnC,GAAE,8BAAyBmC,GAC3BI,kBAAA,yBAAmCJ,IAC/BC,GAEH1D,IAAUyD,GAAS,kBAACK,GAAA,EAAD,CAAKC,EAAG,GAAIP,I,8FCdtC/F,GAAYC,cAAW,SAACC,GAAD,MAAY,CACrCqG,KAAM,CACFC,OAAQ,OACRlG,QAAS,OACTC,cAAe,UAEnBkG,YAAa,CACTrB,SAAU,GAEdsB,iBAAkB,CACdnF,WAAY,OACZ+D,YAAa,YAad,SAASqB,GAAUjF,GAA2B,IACzCtF,EAAmFsF,EAAnFtF,MAAOwK,EAA4ElF,EAA5EkF,eAAgBC,EAA4DnF,EAA5DmF,eADiB,EAC2CnF,EAA5CoF,wBADC,WAC2CpF,EAAnBwC,UADxB,MAC6B,EAD7B,IAC2CxC,EAAXqF,UADhC,MACqC,EADrC,EAE1CpF,EAAU3B,KAEhB,OACI,kBAAC8D,GAAA,EAAD,CAAME,MAAI,EAACgD,IAAK5K,EAAMG,aAAc0H,GAAI,GAAIC,GAAIA,EAAI6C,GAAIA,GACpD,kBAACE,GAAA,EAAD,CAAMjE,UAAWrB,EAAQ4E,MACrB,kBAACW,GAAA,EAAD,CAAalE,UAAWrB,EAAQ8E,aAC5B,kBAACpD,GAAA,EAAD,CAAY8D,cAAY,EAAC7D,QAAQ,MAC5BlH,EAAM2F,SAEX,kBAACsB,GAAA,EAAD,CAAYlC,MAAM,iBACbiG,KAAOC,IAAIjL,EAAMG,cAAc+K,OAAO,0BACvC,6BAFJ,SAGWlL,EAAMyF,OACb,6BAJJ,OAKazF,EAAM0F,UAEnB,kBAACuB,GAAA,EAAD,CAAYlC,MAAM,cAAcmC,QAAQ,MACnClH,EAAMjB,UAGf,kBAACoM,GAAA,EAAD,KACKT,GACG,kBAACU,GAAA,EAAD,CAASC,MAAM,UACX,kBAACC,GAAA,EAAD,CAAY1E,UAAWrB,EAAQ+E,iBAAkBiB,aAAW,SAASC,QAAS,WAAQhB,GAAe,GAAOC,EAAezK,KACvH,kBAAC,KAAD,W,4CCvDzB,SAASyL,GAAYnG,GAAa,IAC7B+F,EAA8C/F,EAA9C+F,MAAO1B,EAAuCrE,EAAvCqE,SAAU+B,EAA6BpG,EAA7BoG,KAAMC,EAAuBrG,EAAvBqG,QAASC,EAActG,EAAdsG,UAExC,OACI,6BACI,kBAACC,GAAA,EAAD,CACIH,KAAMA,EACNI,QAAS,kBAAMH,GAAQ,IACvB3B,kBAAgB,qBAChB+B,mBAAiB,4BAEjB,kBAACC,GAAA,EAAD,CAAavE,GAAG,sBAAsB4D,GACtC,kBAACY,GAAA,EAAD,CAAexE,GAAG,4BAA6BkC,GAC/C,kBAACuC,GAAA,EAAD,KACI,kBAACzD,GAAA,EAAD,CAAQ+C,QAAS,kBAAMG,GAAQ,IAAQ5G,MAAM,WAA7C,MAGA,kBAAC0D,GAAA,EAAD,CAAQ+C,QAAS,WAAQG,GAAQ,GAAQC,KAAgB7G,MAAM,UAAUqD,WAAS,GAAlF,UCJpB,IAAMxE,GAAYC,cAAW,SAACC,GAAD,MAAmB,CAC5CC,MAAO,CACHC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhB+H,KAAM,CACFvH,MAAO,OACPZ,UAAWF,EAAMG,QAAQ,IAE7BI,OAAQ,CACJC,OAAQR,EAAMG,QAAQ,GACtBM,gBAAiBT,EAAMU,QAAQC,QAAQC,MAE3C0H,WAAY,CACRC,QAASvI,EAAMG,QAAQ,EAAG,GAC1BmG,OAAQ,OACRpF,SAAU,WACVsH,MAAO,EACPC,cAAe,OACfrI,QAAS,OACTE,WAAY,SACZoI,eAAgB,UAEpBC,OAAQ,CACJzH,SAAU,WACVJ,MAAO,KAEXE,eAAgB,CACZC,MAAO,QACPC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNlB,WAAY,GACZmB,YAAa,IAEjBuH,SAAU,CACNC,WAAY7I,EAAMG,QAAQ,GAC1B2I,cAAe9I,EAAMG,QAAQ,QAqJrC,IAIMmB,GAAYC,aAJM,SAAChH,GAAD,MAAuB,CAC3CwO,aAAcxO,EAAMW,UAGmBc,EAAzBuF,EArJlB,SAAsBC,GAClB,IAAMC,EAAU3B,KACVE,EAAQgJ,eAFgB,EAGJtH,mBAAS,GAHL,oBAGvBW,EAHuB,KAGhB4G,EAHgB,OAKQvH,oBAAS,GALjB,oBAKvBwH,EALuB,KAKVxC,EALU,OAMYhF,mBAAuB,IANnC,oBAMvByH,EANuB,KAMRC,EANQ,OAOc1H,mBAAS,IAPvB,oBAOvB2H,EAPuB,KAOPC,EAPO,KAaxBnO,EAAY6G,aAAY,SAACzH,GAAD,OAAsBA,EAAMW,OAAOC,aAC3DC,EAAY4G,aAAY,SAACzH,GAAD,OAAsBA,EAAMW,OAAOE,aAC3DmO,EAAqBvH,aAAY,SAACzH,GAAD,OAAsBA,EAAMe,YAAYP,WA6B/E,SAASyO,EAAU1D,GACf,MAAO,CACHnC,GAAG,kBAAD,OAAoBmC,GACtB,gBAAgB,uBAAhB,OAAwCA,IAIhD,OAlCAxD,qBAAU,WACN,OAAO,WACHd,EAAMpF,yBAEX,IAEHkG,qBAAU,WACiB,KAAnB+G,GACA7H,EAAMrF,aAAakN,KAExB,CAACE,IAyBA,kBAAC5G,GAAA,EAAD,CAAWC,UAAU,QACjB,yBAAKE,UAAWrB,EAAQxB,OACpB,kBAAC8C,GAAA,EAAD,CAAQD,UAAWrB,EAAQlB,QACvB,kBAAC,KAAD,MACCpF,GAAa,kBAAC6H,GAAA,EAAD,CAAkBC,cAAY,4BAA4BC,KAAM,GAAIJ,UAAWrB,EAAQT,kBAEzG,kBAACmC,GAAA,EAAD,CAAYP,UAAU,KAAKQ,QAAQ,MAAnC,iBAGA,yBAAKN,UAAWrB,EAAQkH,QACpB,yBAAK7F,UAAWrB,EAAQ6G,YACpB,kBAAC,KAAD,OAEJ,kBAACrE,GAAA,EAAD,CACIb,QAAQ,WACR5C,OAAO,SACP4D,WAAS,EACTT,GAAG,SACHU,MAAM,YACNjC,KAAK,SACL8B,aAAa,MACbI,WAAS,EACTC,SArCpB,SAA4BrC,GACG,KAAvBA,EAAMC,OAAOE,QACbiH,EAAkBpH,EAAMC,OAAOE,OAC/Bb,EAAMrF,aAAa+F,EAAMC,OAAOE,YAqC5B,yBAAKS,UAAWrB,EAAQ4G,MACpB,kBAAC/C,GAAA,EAAD,CAAQpE,SAAS,SAASD,MAAM,WAC5B,kBAACwI,GAAA,EAAD,CACIpH,MAAOA,EACPkC,SApDH,SAACrC,EAA8BwH,GAChDT,EAASS,IAoDWC,eAAe,UACfC,UAAU,UACVxG,QAAQ,YACRqE,aAAW,2BAEX,kBAACoC,GAAA,EAAD,eAAKxF,MAAM,OAAOyF,KAAM,kBAAC,KAAD,OAAsBN,EAAU,KACxD,kBAACK,GAAA,EAAD,eAAKxF,MAAM,WAAWyF,KAAM,kBAAC,KAAD,OAA0BN,EAAU,OAGxE,kBAAC,KAAD,CACIO,KAA0B,QAApB/J,EAAMwF,UAAsB,YAAc,IAChDM,MAAOzD,EACP2H,cA7DM,SAAClE,GACvBmD,EAASnD,KA8DO,kBAACF,GAAD,CAAUvD,MAAOA,EAAOyD,MAAO,EAAGmE,IAAKjK,EAAMwF,WACzC,kBAAC5B,GAAA,EAAD,CAAMC,WAAS,EAACf,UAAWrB,EAAQmH,SAAUzI,QAAS,GACjD/E,IACIA,EAAU8O,KAAKC,OAAS,EACrB/O,EAAU8O,KAAKE,KAAI,SAAClO,EAAO4J,GAAR,OACf,kBAACW,GAAD,CAAWK,IAAKhB,EAAO5J,MAAOA,EAAOwK,eAAgBA,EAAgBC,eAAgByC,OAEvF,2CAKlB,kBAACxD,GAAD,CAAUvD,MAAOA,EAAOyD,MAAO,EAAGmE,IAAKjK,EAAMwF,WACzC,kBAAC5B,GAAA,EAAD,CAAMC,WAAS,EAACf,UAAWrB,EAAQmH,SAAUzI,QAAS,GACjD/E,IACIA,EAAUiP,SAASF,OAAS,EACzB/O,EAAUiP,SAASD,KAAI,SAAClO,EAAO4J,GAAR,OACnB,kBAACW,GAAD,CAAWK,IAAKhB,EAAO5J,MAAOA,EAAOwK,eAAgBA,EAAgBC,eAAgByC,OAEvF,kDAQ9B,kBAACzB,GAAD,CACIJ,MAAM,gBACNK,KAAMsB,EACNrB,QAASnB,EACToB,UAtHQ,WAChBtG,EAAMlG,YAAY6N,EAAc9M,gBAuHxB,kBAACoK,GAAD,CACIK,IAAKqC,EAAc9M,aACnBH,MAAOiN,EACPvC,kBAAkB,EAClBF,eAAgBA,EAChBC,eAAgByC,EAChBpF,GAAI,GACJ6C,GAAI,KAER,6BAfJ,mD,oBC9KN/G,GAAYC,cAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACHC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJC,OAAQR,EAAMG,QAAQ,GACtBM,gBAAiBT,EAAMU,QAAQC,QAAQC,MAE3CC,KAAM,CACFC,MAAO,OACPZ,UAAWF,EAAMG,QAAQ,IAE7BY,OAAQ,CACJP,OAAQR,EAAMG,QAAQ,EAAG,EAAG,IAEhC0E,iBAAkB,CACd5D,MAAOjB,EAAMU,QAAQrF,MAAMuF,MAE/BI,eAAgB,CACZC,MAAO,QACPC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNlB,WAAY,GACZmB,YAAa,QA0FrB,IAIMC,GAAYC,aAJM,SAAChH,GAAD,MAAuB,CAC3CD,aAAcC,EAAMD,gBAGmBoB,EAAzB6F,EA1FlB,SAAkBC,GACd,IAAMC,EAAU3B,KADU,EAGE4B,mBAAS,CACjC9F,SAAU,GACVC,SAAU,KALY,oBAGnBiG,EAHmB,KAGXC,EAHW,OAOQL,oBAAS,GAPjB,oBAOnBoD,EAPmB,KAORC,EAPQ,KAQlBnJ,EAAuBkG,EAAvBlG,SAAUC,EAAaiG,EAAbjG,SACZnB,EAAcsH,aAAY,SAACzH,GAAD,OAAsBA,EAAMD,aAAaI,eAMzE,SAASuH,EAAaC,GAAmE,IAAD,EAC5DA,EAAMC,OAAtBC,EAD4E,EAC5EA,KAAMC,EADsE,EACtEA,MACdN,GAAU,SAAAD,GAAM,kCAAUA,GAAV,mBAAmBM,EAAOC,OAY9C,OAlBAC,qBAAU,WACNd,EAAM1F,WACP,IAiBC,kBAAC6G,GAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACjC,yBAAKC,UAAWrB,EAAQxB,OACpB,kBAAC8C,GAAA,EAAD,CAAQD,UAAWrB,EAAQlB,QACvB,kBAAC,KAAD,MACC7F,GAAe,kBAACsI,GAAA,EAAD,CAAkBC,cAAY,4BAA4BC,KAAM,GAAIJ,UAAWrB,EAAQT,kBAE3G,kBAACmC,GAAA,EAAD,CAAYP,UAAU,KAAKQ,QAAQ,MAAnC,YAGA,0BAAMN,UAAWrB,EAAQZ,KAAMwC,SAnB3C,SAAsBnB,GAClBA,EAAMoB,iBAENyB,GAAa,GACTnJ,GAAYC,GACZ2F,EAAMzF,SAASH,EAAUC,KAejB,kBAACoI,GAAA,EAAD,CACIb,QAAQ,WACR5C,OAAO,SACP2D,UAAQ,EACRC,WAAS,EACTT,GAAG,WACHU,MAAM,WACNjC,KAAK,WACL8B,aAAa,WACbI,WAAS,EACTC,SAAUtC,IAEb6C,IAAclJ,GACX,yBAAKkH,UAAWrB,EAAQoD,kBAAxB,wBAEJ,kBAACZ,GAAA,EAAD,CACIb,QAAQ,WACR5C,OAAO,SACP2D,UAAQ,EACRC,WAAS,EACThC,KAAK,WACLiC,MAAM,WACN5J,KAAK,WACLkJ,GAAG,WACHO,aAAa,mBACbK,SAAUtC,IAEb6C,IAAcjJ,GACX,yBAAKiH,UAAWrB,EAAQoD,kBAAxB,wBAEJ,kBAACF,GAAA,EAAD,CACIlK,KAAK,SACL2J,WAAS,EACThB,QAAQ,YACRnC,MAAM,UACN6B,UAAWrB,EAAQV,OACnBkC,cAAY,gBANhB,kBClGb,SAASqH,KACd,IAAMtP,EAAQgH,aAAY,SAACzH,GAAD,OAAsBA,EAAMS,SAChDuP,EAAWC,cAQjB,OANAlI,qBAAU,WACR5E,GAAQ+M,QAAO,SAAChL,EAAUjF,GACxB+P,EAAS/O,EAAaC,cAEvB,IAGD,yBAAKqH,UAAU,OACb,kBAAC,IAAD,CAAQpF,QAASA,IACf,kBAAC2H,GAAD,MACCrK,EAAMC,SACL,kBAACyP,EAAA,EAAD,CAAOC,SAAU3P,EAAMP,MAAOO,EAAMC,QAAQ2P,YAE9C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIlI,UAAWmI,KACjC,kBAAC,IAAD,CAAOD,KAAK,YAAYlI,UAAWoI,KACnC,kBAAC,IAAD,CAAOF,KAAK,SAASlI,UAAWqI,KAChC,kBAAC,IAAD,CAAOH,KAAK,iBAAiBlI,UAAWsI,KACxC,kBAAC,IAAD,CAAUC,KAAK,IAAIxF,GAAG,S,sBCdjB3F,GAjBDoL,aAAe,CACzB1K,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVgE,UAAW,CACPhE,KAAM,WAEVvF,MAAO,CACHuF,KAAMyK,KAAIC,MAEdC,WAAY,CACRC,QAAS,WCHDC,QACW,cAA7BjM,OAAOC,SAASiM,UAEe,UAA7BlM,OAAOC,SAASiM,UAEhBlM,OAAOC,SAASiM,SAASC,MACvB,2DCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAe/L,MAAOA,IACpB,kBAAC,IAAD,CAAUnB,MAAOA,IACf,kBAACmN,EAAA,EAAD,MACA,kBAAC1B,GAAD,SAIN9H,SAASC,eAAe,SDsHpB,kBAAmBwJ,WACrBA,UAAUC,cAAcC,MACrBrP,MAAK,SAAAxC,GACJA,EAAa8R,gBAEdC,OAAM,SAAAhR,GACLiR,QAAQjR,MAAMA,EAAMJ,c","file":"static/js/main.192e8fb5.chunk.js","sourcesContent":["export const alertConstants = {\r\n    SUCCESS: 'ALERT_SUCCESS',\r\n    ERROR: 'ALERT_ERROR',\r\n    CLEAR: 'ALERT_CLEAR'\r\n};\r\n","export const userConstants = {\r\n    REGISTER_REQUEST: 'USERS_REGISTER_REQUEST',\r\n    REGISTER_SUCCESS: 'USERS_REGISTER_SUCCESS',\r\n    REGISTER_FAILURE: 'USERS_REGISTER_FAILURE',\r\n\r\n    LOGIN_REQUEST: 'USERS_LOGIN_REQUEST',\r\n    LOGIN_SUCCESS: 'USERS_LOGIN_SUCCESS',\r\n    LOGIN_FAILURE: 'USERS_LOGIN_FAILURE',\r\n\r\n    LOGOUT: 'USERS_LOGOUT'\r\n};\r\n","export const messageConstants = {\r\n    SEND_EMAIL_REQUEST: 'MESSAGES_SEND_EMAIL_REQUEST',\r\n    SEND_EMAIL_SUCCESS: 'MESSAGES_SEND_EMAIL_SUCCESS',\r\n    SEND_EMAIL_FAILURE: 'MESSAGES_SEND_EMAIL_FAILURE',\r\n\r\n    GET_EMAILS_REQUEST: 'MESSAGES_GET_EMAILS_REQUEST',\r\n    GET_EMAILS_SUCCESS: 'MESSAGES_GET_EMAILS_SUCCESS',\r\n    GET_EMAILS_FAILURE: 'MESSAGES_GET_EMAILS_FAILURE',\r\n\r\n    CLEAR_EMAILS_STATE: 'MESSAGES_CLEAR_EMAILS_STATE',\r\n\r\n    DELETE_EMAIL_REQUEST: 'MESSAGES_DELETE_EMAIL_REQUEST',\r\n    DELETE_EMAIL_SUCCESS: 'MESSAGES_DELETE_EMAIL_SUCCESS',\r\n    DELETE_EMAIL_FAILURE: 'MESSAGES_DELETE_EMAIL_FAILURE',\r\n};\r\n","import { userConstants } from '../constants';\r\nimport { IUserActionUser, IUserState, IUserItem } from '../types';\r\n\r\nlet storedUser = localStorage.getItem('user');\r\nlet user: IUserItem = storedUser ? JSON.parse(storedUser) : null;\r\nconst initialState = user ? { loggedIn: true, user } : {};\r\n\r\nexport function authentication(state: IUserState = initialState, action: IUserActionUser): IUserState {\r\n    switch (action.type) {\r\n        case userConstants.LOGIN_REQUEST:\r\n            return {\r\n                loggingIn: true,\r\n                user: action.user\r\n            };\r\n        case userConstants.LOGIN_SUCCESS:\r\n            return {\r\n                loggedIn: true,\r\n                user: action.user\r\n            };\r\n        case userConstants.LOGIN_FAILURE:\r\n            return {};\r\n        case userConstants.LOGOUT:\r\n            return {};\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport { authentication } from './authentication.reducer';\r\nimport { registration } from './registration.reducer';\r\nimport { alert } from './alert.reducer';\r\nimport { composeEmail } from './composeEmail.reducer';\r\nimport { deleteEmail } from './deleteEmail.reducer';\r\nimport { emails } from './manageEmails.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    registration,\r\n    authentication,\r\n    composeEmail,\r\n    alert,\r\n    emails,\r\n    deleteEmail\r\n});\r\n\r\nexport default rootReducer;\r\nexport type RootState = ReturnType<typeof rootReducer>","import { userConstants } from '../constants';\r\nimport { IUserAction, IRegisterState } from '../types';\r\n\r\nexport function registration(state: IRegisterState = {}, action: IUserAction): IRegisterState {\r\n    switch (action.type) {\r\n        case userConstants.REGISTER_REQUEST:\r\n            return { registering: true };\r\n        case userConstants.REGISTER_SUCCESS:\r\n            return {};\r\n        case userConstants.REGISTER_FAILURE:\r\n            return {};\r\n        default:\r\n            return state\r\n    }\r\n}","import { messageConstants } from '../constants';\r\nimport { IComposeState, IMessagesAction } from '../types';\r\n\r\nexport function composeEmail(state: IComposeState = {}, action: IMessagesAction): IComposeState {\r\n    switch (action.type) {\r\n        case messageConstants.SEND_EMAIL_REQUEST:\r\n            return { sending: true };\r\n        case messageConstants.SEND_EMAIL_SUCCESS:\r\n            return { success: true };\r\n        case messageConstants.SEND_EMAIL_FAILURE:\r\n            return {};\r\n        default:\r\n            return state\r\n    }\r\n}","import { alertConstants } from '../constants';\r\nimport { IAlertActionMessage, IAlertState } from '../types';\r\n\r\nexport function alert(state: IAlertState = {}, action: IAlertActionMessage): IAlertState {\r\n    switch (action.type) {\r\n        case alertConstants.SUCCESS:\r\n            return {\r\n                type: 'success',\r\n                message: action.message\r\n            };\r\n        case alertConstants.ERROR:\r\n            return {\r\n                type: 'error',\r\n                message: action.message\r\n            };\r\n        case alertConstants.CLEAR:\r\n            return {};\r\n        default:\r\n            return state\r\n    }\r\n}","import { messageConstants } from '../constants';\r\nimport { IMessagesActionGetAll, IGetMessagesState } from '../types';\r\n\r\nexport function emails(state: IGetMessagesState = {}, action: IMessagesActionGetAll): IGetMessagesState {\r\n    switch (action.type) {\r\n        case messageConstants.GET_EMAILS_REQUEST:\r\n            return { searching: true };\r\n        case messageConstants.GET_EMAILS_SUCCESS:\r\n            return { allEmails: action.allEmails };\r\n        case messageConstants.GET_EMAILS_FAILURE:\r\n            return { error: action.error };\r\n        case messageConstants.CLEAR_EMAILS_STATE:\r\n            return {};\r\n        default:\r\n            return state\r\n    }\r\n}","import { messageConstants } from '../constants';\r\nimport { IDeleteMessagesState, IMessagesAction } from '../types';\r\n\r\nexport function deleteEmail(state: IDeleteMessagesState = {}, action: IMessagesAction): IDeleteMessagesState {\r\n    switch (action.type) {\r\n        case messageConstants.DELETE_EMAIL_REQUEST:\r\n            return { deleting: true };\r\n        case messageConstants.DELETE_EMAIL_SUCCESS:\r\n            return { success: true };\r\n        case messageConstants.DELETE_EMAIL_FAILURE:\r\n            return {};\r\n        default:\r\n            return state\r\n    }\r\n}","import { alertConstants } from '../constants';\r\nimport { IAlertActionMessage, IAlertAction } from '../types';\r\n\r\nexport const alertActions = {\r\n    success,\r\n    error,\r\n    clear\r\n};\r\n\r\nfunction success(message: string): IAlertActionMessage {\r\n    return { type: alertConstants.SUCCESS, message };\r\n}\r\n\r\nfunction error(message: string): IAlertActionMessage {\r\n    return { type: alertConstants.ERROR, message };\r\n}\r\n\r\nfunction clear(): IAlertAction {\r\n    return { type: alertConstants.CLEAR };\r\n}","import { userConstants } from '../constants';\r\n\r\nexport const userActions = {\r\n    login,\r\n    logout,\r\n    register,\r\n};\r\n\r\nfunction login(username: string, password: string) {\r\n    return { type: userConstants.LOGIN_REQUEST, username, password }\r\n}\r\n\r\nfunction logout() {\r\n    return { type: userConstants.LOGOUT };\r\n}\r\n\r\nfunction register(username: string, password: string) {\r\n    return { type: userConstants.REGISTER_REQUEST, username, password }\r\n}","import { messageConstants } from '../constants';\r\nimport { IMessageItem } from '../types';\r\n\r\nexport const messageActions = {\r\n    send,\r\n    getAllEmails,\r\n    clearAllEmailsState,\r\n    deleteEmail\r\n};\r\n\r\nfunction send(email: IMessageItem) {\r\n    return { type: messageConstants.SEND_EMAIL_REQUEST, email }\r\n}\r\n\r\nfunction getAllEmails(username: string) {\r\n    return { type: messageConstants.GET_EMAILS_REQUEST, username }\r\n}\r\n\r\nfunction clearAllEmailsState() {\r\n    return { type: messageConstants.CLEAR_EMAILS_STATE };\r\n}\r\n\r\nfunction deleteEmail(creationDate: Number) {\r\n    return { type: messageConstants.DELETE_EMAIL_REQUEST, creationDate }\r\n}","import { handleResponse } from '../utils';\r\n\r\nexport const userService = {\r\n    register,\r\n    login,\r\n    logout\r\n};\r\n\r\nfunction register(username: string, password: string) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password })\r\n    };\r\n\r\n    return fetch(`${process.env.REACT_APP_API_URL}/users/register`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nfunction login(username: string, password: string) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password })\r\n    };\r\n\r\n    return fetch(`${process.env.REACT_APP_API_URL}/users/authenticate`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nfunction logout() {\r\n    localStorage.removeItem('user');\r\n}","import { authHeader, handleResponse } from '../utils';\r\nimport { IMessageItem } from '../types';\r\n\r\nexport const messageService = {\r\n    send,\r\n    getAll,\r\n    getAllForLoggedInUser,\r\n    deleteEmail\r\n};\r\n\r\nfunction send(email: IMessageItem) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ ...email })\r\n    };\r\n\r\n    return fetch(`${process.env.REACT_APP_API_URL}/messages/write`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nfunction getAll(username: string) {\r\n    return fetch(`${process.env.REACT_APP_API_URL}/messages/${username}`)\r\n        .then(handleResponse)\r\n}\r\n\r\nfunction getAllForLoggedInUser(username: string) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    } as RequestInit;\r\n\r\n    return fetch(`${process.env.REACT_APP_API_URL}/messages/mine/${username}`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nfunction deleteEmail(creationDate: string) {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n    } as RequestInit;\r\n\r\n    return fetch(`${process.env.REACT_APP_API_URL}/messages/${creationDate}`, requestOptions)\r\n        .then(handleResponse)\r\n}","import { take, fork, cancel, call, put, cancelled, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { history } from \"../utils\";\r\nimport { userActions, alertActions } from '../actions';\r\nimport { userConstants } from '../constants';\r\nimport { userService } from '../services';\r\n\r\nfunction* logout() {\r\n    yield put(userActions.logout())\r\n\r\n    localStorage.removeItem('user')\r\n}\r\n\r\nfunction* loginFlow(username: string, password: string) {\r\n    let user\r\n    try {\r\n        user = yield call(userService.login, username, password);\r\n\r\n        yield put({ type: userConstants.LOGIN_SUCCESS, user });\r\n\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n\r\n        history.push('/')\r\n    } catch (error) {\r\n        yield put({ type: userConstants.LOGIN_FAILURE, error });\r\n        yield put(alertActions.error(error));\r\n    } finally {\r\n        if (yield cancelled()) {\r\n            history.push('/login')\r\n        }\r\n    }\r\n\r\n    return user\r\n}\r\n\r\nexport function* loginWatcher() {\r\n    while (true) {\r\n        const { username, password } = yield take(userConstants.LOGIN_REQUEST);\r\n\r\n        const task = yield fork(loginFlow, username, password);\r\n\r\n        const action = yield take([userConstants.LOGOUT, userConstants.LOGIN_FAILURE]);\r\n\r\n        if (action.type === userConstants.LOGOUT) yield cancel(task)\r\n\r\n        yield call(logout)\r\n    }\r\n}\r\n\r\n\r\nfunction* RegistrationFlow(user: any) {\r\n    try {\r\n        yield call(userService.register, user.username, user.password);\r\n\r\n        yield put({ type: userConstants.REGISTER_SUCCESS });\r\n\r\n        history.push('/login');\r\n\r\n        yield put(alertActions.success('Registration successful'));\r\n    } catch (error) {\r\n        yield put({ type: userConstants.REGISTER_FAILURE, error });\r\n        yield put(alertActions.error(error));\r\n    }\r\n}\r\n\r\nexport function* registerWatcher() {\r\n    yield takeLatest(userConstants.REGISTER_REQUEST, RegistrationFlow);\r\n}","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { alertActions } from '../actions';\r\nimport { messageConstants } from '../constants';\r\nimport { messageService } from '../services';\r\n\r\nfunction* RegistrationFlow(emailAction: any) {\r\n    try {\r\n        yield call(messageService.send, emailAction.email);\r\n\r\n        yield put({ type: messageConstants.SEND_EMAIL_SUCCESS });\r\n        yield put(alertActions.success('Send Email successful'));\r\n    } catch (error) {\r\n        yield put({ type: messageConstants.SEND_EMAIL_FAILURE, error });\r\n        yield put(alertActions.error(error));\r\n    }\r\n}\r\n\r\nexport function* composeEmailWatcher() {\r\n    yield takeLatest(messageConstants.SEND_EMAIL_REQUEST, RegistrationFlow);\r\n}","import { call, put, takeLatest, select } from 'redux-saga/effects';\r\n\r\nimport { alertActions } from '../actions';\r\nimport { messageConstants } from '../constants';\r\nimport { messageService } from '../services';\r\n\r\nfunction* getAllEmailsFlow(emailAction: any) {\r\n    try {\r\n        const loggedIn = yield select((state) => state.authentication.loggedIn);\r\n\r\n        const allEmails = loggedIn ?\r\n            yield call(messageService.getAllForLoggedInUser, emailAction.username) :\r\n            yield call(messageService.getAll, emailAction.username);\r\n\r\n        yield put({ type: messageConstants.GET_EMAILS_SUCCESS, allEmails });\r\n        yield put(alertActions.success('Get Emails successful'));\r\n    } catch (error) {\r\n        yield put({ type: messageConstants.GET_EMAILS_FAILURE, error });\r\n        yield put(alertActions.error(error));\r\n    }\r\n}\r\n\r\nexport function* getAllEmailsWatcher() {\r\n    yield takeLatest(messageConstants.GET_EMAILS_REQUEST, getAllEmailsFlow);\r\n}\r\n\r\n\r\nfunction* deleteEmailFlow(emailAction: any) {\r\n    try {\r\n        yield call(messageService.deleteEmail, emailAction.creationDate);\r\n\r\n        yield put({ type: messageConstants.DELETE_EMAIL_SUCCESS });\r\n        yield put(alertActions.success('Delete Email successful'));\r\n    } catch (error) {\r\n        yield put({ type: messageConstants.DELETE_EMAIL_FAILURE, error });\r\n        yield put(alertActions.error(error));\r\n    }\r\n}\r\n\r\nexport function* deleteEmailWatcher() {\r\n    yield takeLatest(messageConstants.DELETE_EMAIL_REQUEST, deleteEmailFlow);\r\n}","import { all } from 'redux-saga/effects';\r\n\r\nimport { loginWatcher, registerWatcher } from './user.saga';\r\nimport { composeEmailWatcher } from './composeEmail.saga';\r\nimport { getAllEmailsWatcher, deleteEmailWatcher } from './manageEmails.saga';\r\n\r\nfunction* rootSaga() {\r\n    yield all(\r\n        [\r\n            loginWatcher(),\r\n            registerWatcher(),\r\n            composeEmailWatcher(),\r\n            getAllEmailsWatcher(),\r\n            deleteEmailWatcher()\r\n        ]);\r\n}\r\n\r\nexport default rootSaga;","import { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport rootReducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(sagaMiddleware)\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);","export function authHeader() {\r\n    let storedUser = localStorage.getItem('user');\r\n    let user = storedUser ? JSON.parse(storedUser) : null;\r\n\r\n    if (user && user.token) {\r\n        return { 'Authorization': 'Bearer ' + user.token };\r\n    } else {\r\n        return {};\r\n    }\r\n}","import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","export function handleResponse(response: Response) {\r\n    return response.text().then((text: string) => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                localStorage.removeItem('user');\r\n                window.location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return data;\r\n    });\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, connect } from 'react-redux';\r\n\r\nimport { Avatar, CircularProgress, Button, TextField, Grid, Typography, Container } from '@material-ui/core';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { messageActions } from '../../actions';\r\nimport { RootState } from '../../reducers';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(5),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    buttonProgress: {\r\n        color: 'white',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -20,\r\n        marginLeft: -20,\r\n    },\r\n}));\r\n\r\nfunction ComposeEmail(props: any) {\r\n    const classes = useStyles();\r\n\r\n    const [inputs, setInputs] = useState({\r\n        sender: '',\r\n        receiver: '',\r\n        subject: '',\r\n        message: '',\r\n    });\r\n\r\n    const { sending, success } = useSelector((state: RootState) => state.composeEmail);\r\n\r\n    useEffect(() => {\r\n        if (success) {\r\n            clearForm()\r\n        }\r\n    }, [success]);\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\r\n        const { name, value } = event.target;\r\n        setInputs(inputs => ({ ...inputs, [name]: value }));\r\n    }\r\n\r\n    function handleSubmit(this: any, event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n\r\n        if (!Object.values(inputs).some(x => (x === ''))) {\r\n            props.send(inputs);\r\n        }\r\n    }\r\n\r\n    const clearForm = () => {\r\n        (document.getElementById(\"compose-form\") as HTMLFormElement)?.reset();\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <MailOutlineIcon />\r\n                    {sending && <CircularProgress data-testid=\"loggingInCircularProgress\" size={40} className={classes.buttonProgress} />}\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    New Email\r\n                </Typography>\r\n                <form className={classes.form} onSubmit={handleSubmit} id=\"compose-form\">\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                autoComplete=\"receiver\"\r\n                                name=\"receiver\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"receiver\"\r\n                                label=\"To\"\r\n                                autoFocus\r\n                                onChange={handleChange}\r\n                                disabled={sending}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"sender\"\r\n                                label=\"From\"\r\n                                name=\"sender\"\r\n                                autoComplete=\"sender\"\r\n                                onChange={handleChange}\r\n                                disabled={sending}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"subject\"\r\n                                label=\"Subject\"\r\n                                name=\"subject\"\r\n                                autoComplete=\"subject\"\r\n                                onChange={handleChange}\r\n                                disabled={sending}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                multiline\r\n                                rows={6}\r\n                                name=\"message\"\r\n                                label=\"Message\"\r\n                                id=\"message\"\r\n                                onChange={handleChange}\r\n                                disabled={sending}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        disabled={sending}\r\n                    >\r\n                        Send\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    composeEmail: state.composeEmail,\r\n})\r\n\r\nconst connected = connect(mapStateToProps, messageActions)(ComposeEmail);\r\nexport { connected as ComposeEmail };","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, connect } from 'react-redux';\r\n\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { CircularProgress, Avatar, Button, TextField, Typography, makeStyles, Container } from '@material-ui/core';\r\n\r\nimport { userActions } from '../../actions';\r\nimport { RootState } from '../../reducers';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(5),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    invalid_feedback: {\r\n        color: theme.palette.error.main,\r\n    },\r\n    buttonProgress: {\r\n        color: 'white',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -20,\r\n        marginLeft: -20,\r\n    },\r\n}));\r\n\r\nfunction Login(props: any) {\r\n    const classes = useStyles();\r\n\r\n    const [inputs, setInputs] = useState({\r\n        username: '',\r\n        password: ''\r\n    });\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const { username, password } = inputs;\r\n    const loggingIn = useSelector((state: RootState) => state.authentication.loggingIn);\r\n\r\n    useEffect(() => {\r\n        props.logout()\r\n    }, []);\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\r\n        const { name, value } = event.target;\r\n        setInputs(inputs => ({ ...inputs, [name]: value }));\r\n    }\r\n\r\n    function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n\r\n        setSubmitted(true);\r\n        if (username && password) {\r\n            props.login(username, password)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                    {loggingIn && <CircularProgress data-testid=\"loggingInCircularProgress\" size={40} className={classes.buttonProgress} />}\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Login\r\n                </Typography>\r\n                <form className={classes.form} onSubmit={handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"username\"\r\n                        label=\"Username\"\r\n                        name=\"username\"\r\n                        autoComplete=\"username\"\r\n                        autoFocus\r\n                        onChange={handleChange}\r\n                    />\r\n                    {submitted && !username &&\r\n                        <div className={classes.invalid_feedback}>Username is required</div>\r\n                    }\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        onChange={handleChange}\r\n                    />\r\n                    {submitted && !password &&\r\n                        <div className={classes.invalid_feedback}>Password is required</div>\r\n                    }\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        className={classes.submit}\r\n                        data-testid=\"submitButton\"\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    authentication: state.authentication,\r\n})\r\n\r\nconst connected = connect(mapStateToProps, userActions)(Login);\r\nexport { connected as Login };\r\n\r\n","import React, { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { AppBar, Grid, Toolbar, Typography, Button } from '@material-ui/core';\r\n\r\nimport { RootState } from '../reducers';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        emailButton: {\r\n            marginRight: theme.spacing(2),\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n    }),\r\n);\r\n\r\nexport function TopBar() {\r\n    const classes = useStyles();\r\n    const authentication = useSelector((state: RootState) => state.authentication);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"space-between\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <Typography variant=\"h6\">\r\n                            Hello {authentication.loggedIn ? authentication.user?.username : \"guest\"}!\r\n                        </Typography>\r\n                        <div>\r\n                            <Button color=\"inherit\" className={classes.emailButton} component={Link} to={'/compose-email'}>Compose Email</Button>\r\n                            <Button color=\"inherit\" className={classes.emailButton} component={Link} to={'/'}>Manage Emails</Button>\r\n                        </div>\r\n                        <div>\r\n                            {authentication.loggedIn\r\n                                ? <Button color=\"inherit\" component={Link} to={'/login'}>Logout</Button>\r\n                                : <Fragment>\r\n                                    <Button color=\"secondary\" variant=\"contained\" component={Link} to={'/login'}>Login</Button>\r\n                                    <Button color=\"inherit\" component={Link} to={'/register'}>Register</Button>\r\n                                </Fragment>\r\n                            }\r\n                        </div>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport { Typography, Box } from '@material-ui/core';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    dir?: string;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nexport function TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box p={3}>{children}</Box>}\r\n        </Typography>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nimport { Grid, Card, CardContent, Typography, CardActions, IconButton, Tooltip } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\n\r\nimport { IMessageItem } from '../types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1,\r\n    },\r\n    deleteIconButton: {\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n    },\r\n}));\r\n\r\ninterface IAccountCardProps {\r\n    email: IMessageItem,\r\n    setConfirmOpen: Function,\r\n    setDeleteEmail: Function,\r\n    showDeleteButton?: boolean,\r\n    sm?: 6 | 12,\r\n    md?: 4 | 12,\r\n}\r\n\r\nexport function EmailCard(props: IAccountCardProps) {\r\n    const { email, setConfirmOpen, setDeleteEmail, showDeleteButton = true, sm = 6, md = 4 } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item key={email.creationDate} xs={12} sm={sm} md={md} >\r\n            <Card className={classes.card}>\r\n                <CardContent className={classes.cardContent}>\r\n                    <Typography gutterBottom variant=\"h4\">\r\n                        {email.subject}\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">\r\n                        {moment.utc(email.creationDate).format('MMMM Do YYYY, HH:mm:ss')}\r\n                        <br />\r\n                        From: {email.sender}\r\n                        <br />\r\n                            To: {email.receiver}\r\n                    </Typography>\r\n                    <Typography color=\"textPrimary\" variant=\"h5\">\r\n                        {email.message}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    {showDeleteButton &&\r\n                        <Tooltip title=\"Delete\">\r\n                            <IconButton className={classes.deleteIconButton} aria-label=\"delete\" onClick={() => { setConfirmOpen(true); setDeleteEmail(email) }} >\r\n                                <DeleteForeverIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    }\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from '@material-ui/core';\r\n\r\nexport function AlertDialog(props: any) {\r\n    const { title, children, open, setOpen, onConfirm } = props;\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                onClose={() => setOpen(false)}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n                <DialogContent id=\"alert-dialog-description\" >{children}</DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setOpen(false)} color=\"primary\">\r\n                        No\r\n                    </Button>\r\n                    <Button onClick={() => { setOpen(false); onConfirm(); }} color=\"primary\" autoFocus>\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, connect } from 'react-redux';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\n\r\nimport { makeStyles, Theme, useTheme } from '@material-ui/core/styles';\r\nimport { AppBar, Tabs, Tab, Typography, Avatar, CircularProgress, TextField, Container, Grid } from '@material-ui/core';\r\nimport CallReceivedIcon from '@material-ui/icons/CallReceived';\r\nimport CallMadeIcon from '@material-ui/icons/CallMade';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\n\r\nimport { messageActions } from '../../actions';\r\nimport { RootState } from '../../reducers';\r\nimport { IMessageItem } from '../../types';\r\nimport { TabPanel, EmailCard, AlertDialog } from '../../components'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(5),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    tabs: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(4, 1),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        right: 0,\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        width: 300,\r\n    },\r\n    buttonProgress: {\r\n        color: 'white',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -20,\r\n        marginLeft: -20,\r\n    },\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n}));\r\n\r\nfunction ManageEmails(props: any) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = useState(0);\r\n\r\n    const [confirmOpen, setConfirmOpen] = useState(false);\r\n    const [emailToDelete, setEmailToDelete] = useState<IMessageItem>({} as IMessageItem);\r\n    const [searchMessages, setSearchMessages] = useState('');\r\n\r\n    const deleteEmail = () => {\r\n        props.deleteEmail(emailToDelete.creationDate);\r\n    }\r\n\r\n    const searching = useSelector((state: RootState) => state.emails.searching);\r\n    const allEmails = useSelector((state: RootState) => state.emails.allEmails);\r\n    const deleteEmailSuccess = useSelector((state: RootState) => state.deleteEmail.success);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            props.clearAllEmailsState()\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (searchMessages !== '') {\r\n            props.getAllEmails(searchMessages);\r\n        }\r\n    }, [deleteEmailSuccess]);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index: number) => {\r\n        setValue(index);\r\n    };\r\n\r\n    function handleChangeSearch(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\r\n        if (event.target.value !== '') {\r\n            setSearchMessages(event.target.value);\r\n            props.getAllEmails(event.target.value);\r\n        }\r\n    }\r\n\r\n    function a11yProps(index: any) {\r\n        return {\r\n            id: `full-width-tab-${index}`,\r\n            'aria-controls': `full-width-tabpanel-${index}`,\r\n        };\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" >\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <MailOutlineIcon />\r\n                    {searching && <CircularProgress data-testid=\"loggingInCircularProgress\" size={40} className={classes.buttonProgress} />}\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Manage Emails\r\n                </Typography>\r\n                <div className={classes.search}>\r\n                    <div className={classes.searchIcon}>\r\n                        <SearchIcon />\r\n                    </div>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        id=\"search\"\r\n                        label=\"Search...\"\r\n                        name=\"search\"\r\n                        autoComplete=\"off\"\r\n                        autoFocus\r\n                        onChange={handleChangeSearch}\r\n                    />\r\n                </div>\r\n                <div className={classes.tabs}>\r\n                    <AppBar position=\"static\" color=\"default\">\r\n                        <Tabs\r\n                            value={value}\r\n                            onChange={handleChange}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                            variant=\"fullWidth\"\r\n                            aria-label=\"full width tabs example\"\r\n                        >\r\n                            <Tab label=\"Sent\" icon={<CallMadeIcon />} {...a11yProps(0)} />\r\n                            <Tab label=\"Received\" icon={<CallReceivedIcon />} {...a11yProps(1)} />\r\n                        </Tabs>\r\n                    </AppBar>\r\n                    <SwipeableViews\r\n                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                        index={value}\r\n                        onChangeIndex={handleChangeIndex}\r\n                    >\r\n                        <TabPanel value={value} index={0} dir={theme.direction}>\r\n                            <Grid container className={classes.cardGrid} spacing={4}>\r\n                                {allEmails &&\r\n                                    (allEmails.sent.length > 0 ?\r\n                                        allEmails.sent.map((email, index) =>\r\n                                            <EmailCard key={index} email={email} setConfirmOpen={setConfirmOpen} setDeleteEmail={setEmailToDelete} />\r\n                                        )\r\n                                        : 'No sent messages matched your search.'\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </TabPanel>\r\n                        <TabPanel value={value} index={1} dir={theme.direction}>\r\n                            <Grid container className={classes.cardGrid} spacing={4}>\r\n                                {allEmails &&\r\n                                    (allEmails.received.length > 0 ?\r\n                                        allEmails.received.map((email, index) =>\r\n                                            <EmailCard key={index} email={email} setConfirmOpen={setConfirmOpen} setDeleteEmail={setEmailToDelete} />\r\n                                        )\r\n                                        : 'No received messages matched your search.'\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </TabPanel>\r\n                    </SwipeableViews>\r\n                </div>\r\n            </div>\r\n            <AlertDialog\r\n                title=\"Delete Email?\"\r\n                open={confirmOpen}\r\n                setOpen={setConfirmOpen}\r\n                onConfirm={deleteEmail}\r\n            >\r\n                <EmailCard\r\n                    key={emailToDelete.creationDate}\r\n                    email={emailToDelete}\r\n                    showDeleteButton={false}\r\n                    setConfirmOpen={setConfirmOpen}\r\n                    setDeleteEmail={setEmailToDelete}\r\n                    sm={12}\r\n                    md={12}\r\n                />\r\n                <br />\r\n                Are you sure you want to delete this Email?\r\n            </AlertDialog>\r\n        </Container >\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    searchEmails: state.emails,\r\n})\r\n\r\nconst connected = connect(mapStateToProps, messageActions)(ManageEmails);\r\nexport { connected as ManageEmails };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, connect } from 'react-redux';\r\n\r\nimport BorderColorRoundedIcon from '@material-ui/icons/BorderColorRounded';\r\nimport { CircularProgress, Avatar, Button, TextField, Typography, makeStyles, Container } from '@material-ui/core';\r\n\r\nimport { userActions } from '../../actions';\r\nimport { RootState } from '../../reducers';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(5),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    invalid_feedback: {\r\n        color: theme.palette.error.main,\r\n    },\r\n    buttonProgress: {\r\n        color: 'white',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -20,\r\n        marginLeft: -20,\r\n    },\r\n}));\r\n\r\nfunction Register(props: any) {\r\n    const classes = useStyles();\r\n\r\n    const [inputs, setInputs] = useState({\r\n        username: '',\r\n        password: ''\r\n    });\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const { username, password } = inputs;\r\n    const registering = useSelector((state: RootState) => state.registration.registering);\r\n\r\n    useEffect(() => {\r\n        props.logout()\r\n    }, []);\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\r\n        const { name, value } = event.target;\r\n        setInputs(inputs => ({ ...inputs, [name]: value }));\r\n    }\r\n\r\n    function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n\r\n        setSubmitted(true);\r\n        if (username && password) {\r\n            props.register(username, password);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <BorderColorRoundedIcon />\r\n                    {registering && <CircularProgress data-testid=\"loggingInCircularProgress\" size={40} className={classes.buttonProgress} />}\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Register\r\n                </Typography>\r\n                <form className={classes.form} onSubmit={handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"username\"\r\n                        label=\"Username\"\r\n                        name=\"username\"\r\n                        autoComplete=\"username\"\r\n                        autoFocus\r\n                        onChange={handleChange}\r\n                    />\r\n                    {submitted && !username &&\r\n                        <div className={classes.invalid_feedback}>Username is required</div>\r\n                    }\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        onChange={handleChange}\r\n                    />\r\n                    {submitted && !password &&\r\n                        <div className={classes.invalid_feedback}>Password is required</div>\r\n                    }\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        data-testid=\"submitButton\"\r\n                    >\r\n                        Register\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    registration: state.registration,\r\n})\r\n\r\nconst connected = connect(mapStateToProps, userActions)(Register);\r\nexport { connected as Register };\r\n\r\n","import React, { useEffect } from 'react';\nimport { Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Alert } from '@material-ui/lab';\n\nimport { history } from \"../utils\";\nimport { alertActions } from '../actions';\nimport { ManageEmails, ComposeEmail, Login, Register } from '../pages';\nimport { RootState } from '../reducers';\nimport { TopBar } from '../components';\n\nexport function App() {\n  const alert = useSelector((state: RootState) => state.alert);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    history.listen((location, action) => {\n      dispatch(alertActions.clear());\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        <TopBar />\n        {alert.message &&\n          <Alert severity={alert.type}>{alert.message.toString()}</Alert>\n        }\n        <Switch>\n          <Route exact path=\"/\" component={ManageEmails} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/compose-email\" component={ComposeEmail} />\n          <Redirect from=\"*\" to=\"/\" />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n","import { red } from '@material-ui/core/colors';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#556cd6',\r\n        },\r\n        secondary: {\r\n            main: '#19857b',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n        background: {\r\n            default: '#fff',\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\n\nimport './index.css';\nimport { App } from './App/App';\nimport { store } from './utils';\nimport theme from './theme';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <CssBaseline />\n        <App />\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}